AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for deploying a Spring Boot API with MySQL Aurora on Fargate

Parameters:
  DBName:
    Type: String
    Description: Name of the MySQL database
    Default: mldb
  DBUsername:
    Type: String
    Description: Username for accessing the MySQL database
    Default: admin
  DBPassword:
    Type: String
    Description: Password for accessing the MySQL database
    NoEcho: true
    Default: unGr4nP4ssw0rd!
  SpringBootBookmarkImage:
    Type: String
    Description: Docker image URI for the Spring Boot
    Default: https://hub.docker.com/r/lichobaron/bookmark
  SpringBootCouponImage:
    Type: String
    Description: Docker image URI for the Spring Boot API
    Default: https://hub.docker.com/r/lichobaron/coupon
  SpringBootBookmarkPort:
    Type: Number
    Description: Port on which Spring Boot API will listen
    Default: 8080
  SpringBootCouponPort:
    Type: Number
    Description: Port on which Spring Boot API will listen
    Default: 8081

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'us-east-1a'

  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1b'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  Subnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Fargate service'
      VpcId: !Ref VPC

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MyLoadBalancer
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      Type: application

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - ecs:ExecuteCommand
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:StartTask
                  - ecs:StopTask
                  - ecs:UpdateContainerAgent
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
                Resource: "*"

  FargateTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: coupon-api
          Image: !Ref SpringBootCouponImage
          PortMappings:
            - ContainerPort: !Ref SpringBootCouponPort

  FargateService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: default
      LaunchType: FARGATE
      DesiredCount: 2
      TaskDefinition: !Ref FargateTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - ContainerName: coupon-container
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  AuroraDB:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.1
      EngineMode: serverless
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DatabaseName: !Ref DBName
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 1
        MaxCapacity: 2
        SecondsUntilAutoPause: 300
      EnableHttpEndpoint: true

Outputs:
  SpringBootCouponAPIEndpoint:
    Description: Endpoint URL for accessing the Spring Boot API
    Value: !Sub "http://${LoadBalancer.DNSName}:${SpringBootCouponPort}"
