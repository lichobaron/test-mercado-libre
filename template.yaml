AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for deploying a Spring Boot API with MySQL Aurora on Fargate

Parameters:
  DBName:
    Type: String
    Description: Name of the MySQL database
    Default: mldb
  DBUsername:
    Type: String
    Description: Username for accessing the MySQL database
    Default: admin
  DBPassword:
    Type: String
    Description: Password for accessing the MySQL database
    NoEcho: true
    Default: unGr4nP4ssw0rd!
  SpringBootBookmarkImage:
    Type: String
    Description: Docker image URI for the Spring Boot
    Default: https://hub.docker.com/r/lichobaron/bookmark
  SpringBootCouponImage:
    Type: String
    Description: Docker image URI for the Spring Boot API
    Default: https://hub.docker.com/r/lichobaron/coupon
  SpringBootBookmarkPort:
    Type: Number
    Description: Port on which Spring Boot API will listen
    Default: 8080
  SpringBootCouponPort:
    Type: Number
    Description: Port on which Spring Boot API will listen
    Default: 8081

Resources:
  MLVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  MLSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MLVPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'us-east-1a'

  MLSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MLVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1b'

  MLInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MLVPC
      InternetGatewayId: !Ref MLInternetGateway

  MLRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MLVPC

  MLSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MLSubnet1
      RouteTableId: !Ref MLRouteTable

  MLSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MLSubnet2
      RouteTableId: !Ref MLRouteTable

  MLSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Fargate service'
      VpcId: !Ref MLVPC

  MLLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MlLoadBalancer
      Subnets:
        - !Ref MLSubnet1
        - !Ref MLSubnet2
      SecurityGroups:
        - !Ref MLSecurityGroup
      Scheme: internet-facing
      Type: application

  MLTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: MlTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref MLVPC
 
  MLListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MLTargetGroup
      LoadBalancerArn: !Ref MLLoadBalancer
      Port: 80
      Protocol: HTTP

  MLTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - ecs:ExecuteCommand
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:StartTask
                  - ecs:StopTask
                  - ecs:UpdateContainerAgent
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
                Resource: "*"

  MLFargateTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt MLTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: coupon-container
          Image: !Ref SpringBootCouponImage
          PortMappings:
            - ContainerPort: !Ref SpringBootCouponPort

  MLFargateCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: MLFargateCluster

  MLFargateService:
    Type: 'AWS::ECS::Service'
    DependsOn:
    - MLTargetGroup
    - MLLoadBalancer
    - MLListener
    - MLFargateTaskDefinition
    - MLFargateCluster
    Properties:
      Cluster: !Ref MLFargateCluster
      LaunchType: FARGATE
      DesiredCount: 2
      TaskDefinition: !Ref MLFargateTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref MLSubnet1
            - !Ref MLSubnet2
          SecurityGroups:
            - !Ref MLSecurityGroup
      LoadBalancers:
        - ContainerName: coupon-container
          ContainerPort: !Ref SpringBootCouponPort
          TargetGroupArn: !Ref MLTargetGroup

  MLAuroraDB:
    Type: AWS::RDS::DBCluster
    DependsOn:
    - MLFargateService
    Properties:
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.1
      EngineMode: serverless
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DatabaseName: !Ref DBName
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 1
        MaxCapacity: 2
        SecondsUntilAutoPause: 300
      EnableHttpEndpoint: true

Outputs:
  SpringBootCouponAPIEndpoint:
    Description: Endpoint URL for accessing the Spring Boot Coupon API
    Value: !Sub "http://${MLLoadBalancer.DNSName}:${SpringBootCouponPort}"
